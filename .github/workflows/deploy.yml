name: Build and Deploy ASP.NET Core App to IIS via SSH


on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: üîß Build and Publish
    runs-on: windows-latest

    steps:
      - name: ‚úÖ Checkout Code
        uses: actions/checkout@v3

      - name: üõ† Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: üì¶ Restore, Build and Publish
        run: |
          mkdir logs
          echo "üîÑ Restoring dependencies..."
          dotnet restore | Tee-Object -FilePath logs/restore.log
          echo "üèó Building project..."
          dotnet build --configuration Release | Tee-Object -FilePath logs/build.log
          echo "üöÄ Publishing..."
          dotnet publish --configuration Release --output publish_output | Tee-Object -FilePath logs/publish.log

      - name: ‚òÅ Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: logs

      - name: ‚òÅ Upload Published App
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: publish_output

  deploy:
    name: üöÄ Deploy to IIS Server via SSH
    needs: build
    runs-on: windows-latest

    steps:
      - name: ‚¨á Download Published App
        uses: actions/download-artifact@v4
        with:
            name: published-app
            path: publish_output

      - name: üîé Port 22 reachability check
        shell: pwsh
        run: |
              $remotehost='${{ secrets.IIS_HOST }}'
              $r = Test-NetConnection -ComputerName $remotehost -Port 22 -WarningAction SilentlyContinue
              Write-Host "::notice title=TCP 22 Reachable:: $($r.TcpTestSucceeded)"
              if (-not $r.TcpTestSucceeded) {
                Write-Host "::error title=Network:: Cannot reach $remotehost:22 from runner"
                exit 1
              }

      - name: üß™ SSH key setup (if not already done)
        shell: pwsh
        run: |
              $sshDir   = "$env:USERPROFILE\.ssh"
              $privPath = Join-Path $sshDir 'id_rsa'
              if (-not (Test-Path $privPath)) {
                $key = @"
              ${{ secrets.IIS_SSH_KEY }}
              "@.Trim()
              New-Item -ItemType Directory -Force -Path $sshDir | Out-Null
              Set-Content -Path $privPath -Value $key -Encoding ascii -NoNewline
              icacls $privPath /inheritance:r | Out-Null
              icacls $privPath /grant:r "$($env:USERNAME):(R)" | Out-Null
              ssh-keyscan -t rsa ${{ secrets.IIS_HOST }} 2>$null | Out-File "$sshDir\known_hosts" -Encoding ascii
              }

      - name: ‚úÖ Validate private key format
        shell: pwsh
        run: |
              $sshDir   = "$env:USERPROFILE\.ssh"
              $privPath = Join-Path $sshDir 'id_rsa'
              $key = @"
              ${{ secrets.IIS_SSH_KEY }}
              "@.Trim()

              New-Item -ItemType Directory -Force -Path $sshDir | Out-Null
              Set-Content -Path $privPath -Value $key -Encoding ascii -NoNewline

              icacls $privPath /inheritance:r | Out-Null
              icacls $privPath /grant:r "$($env:USERNAME):(R)" | Out-Null

              # Check for BOM (should NOT be EF BB BF)
              $bytes = [System.IO.File]::ReadAllBytes($privPath)
              if ($bytes.Length -ge 3) {
                $sig = ($bytes[0..2] | ForEach-Object { '{0:X2}' -f $_ }) -join ' '
                Write-Host "::notice title=First 3 bytes::$sig"
              }

              # Ask ssh-keygen to derive a public key; if it fails, the private key is invalid
              try {
                $pub = ssh-keygen -y -f $privPath 2>&1
                if ($LASTEXITCODE -ne 0) {
                  Write-Host "::error title=Invalid private key:: $pub"
                  exit 1
                } else {
                  Write-Host "::notice title=Derived public key OK:: $(($pub -replace '\s+',' ').Substring(0,[Math]::Min(60,$pub.Length)))..."
                }
              } catch {
                Write-Host "::error title=ssh-keygen failed:: $($_.Exception.Message)"
                exit 1
              }

      - name: üö¶ SSH test (fail fast, full logs)
        shell: pwsh
        run: |
              try {
                $sshExe = (Get-Command ssh -ErrorAction Stop).Source
                $args = @(
                  '-vvv',                                 # max verbosity
                  '-i', "$env:USERPROFILE\.ssh\id_rsa",
                  '-o', 'StrictHostKeyChecking=no',
                  '-o', 'PreferredAuthentications=publickey',
                  '-o', 'PasswordAuthentication=no',      # avoid password prompt hangs
                  '-o', 'BatchMode=yes',                  # fail if key not accepted
                  '-o', 'ConnectTimeout=20',              # 20s connect timeout
                  '-o', 'ConnectionAttempts=1',           # no retries
                  '${{ secrets.IIS_USER }}@${{ secrets.IIS_HOST }}',
                  'whoami'
                )

                Write-Host "::notice title=ssh.exe::$sshExe"
                Write-Host "::notice title=args::" + ($args -join ' ')

                # Run with a hard overall timeout (45s) in case the server stalls after connect
                $job = Start-Job { param($exe,$a) & $exe @a 2>&1; $LASTEXITCODE } -ArgumentList $sshExe,$args
                if (-not (Wait-Job $job -Timeout 45)) {
                  Stop-Job $job | Out-Null
                  Receive-Job $job | ForEach-Object { Write-Host "::error title=SSH Partial Log:: $_" }
                  throw "Timed out waiting for SSH after 45s"
                }
                $output = Receive-Job $job
                $exit   = ($output | Select-Object -Last 1)
                $log    = $output | Select-Object -SkipLast 1

                if ($exit -eq 0) {
                  Write-Host "::notice title=SSH Output::$(($log | Out-String).Trim())"
                  Write-Host "::notice title=Result::Connection successful ‚úÖ"
                } else {
                  Write-Host "::error title=SSH Failed (exit $exit)::$(($log | Out-String).Trim())"
                  exit 1
                }
              } catch {
                Write-Host "::error title=SSH Exception:: $($_.Exception.Message)"
                exit 1
              }

      # - name: üîê Setup SSH Key and Variables
      #   shell: pwsh
      #   run: |
      #       $sshDir     = "$env:USERPROFILE\.ssh"
      #       $sshKeyPath = "$sshDir\id_rsa"
      #       $sshTarget  = "${{ secrets.IIS_SSH_HOST }}"             # e.g. deploy@49.249.200.70
      #       $remotePath = "C:/Deploy/SampleMvcApp"                  # Remote deploy directory
      #       $remoteZip  = "$remotePath/app.zip"

      #       # Logging
      #       Write-Host "::notice title=üîê SSH KeyPath::$sshKeyPath"
      #       Write-Host "::notice title=üîç SSH Target::$sshTarget"
      #       Write-Host "::notice title=üìÅ Remote Path::$remotePath"
      #       Write-Host "::notice title=üì¶ Remote Zip::$remoteZip"

      #       # Save private key
      #       New-Item -ItemType Directory -Force -Path $sshDir | Out-Null
      #       Set-Content -Path $sshKeyPath -Value "${{ secrets.IIS_SSH_KEY }}" -Force

      #       # Create remote folder if needed
      #       Write-Host "üìÅ Ensuring remote directory exists..."
      #       $mkdirCommand = "powershell -NoProfile -Command `"New-Item -ItemType Directory -Force -Path '$remotePath'`""
      #       ssh -i "$sshKeyPath" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $sshTarget $mkdirCommand

      #       # Compress published app
      #       Write-Host "üì¶ Compressing app.zip from publish_output..."
      #       Compress-Archive -Path publish_output\* -DestinationPath app.zip -Force

      #       # Upload via SCP
      #       Write-Host "üì§ Uploading app.zip to $remoteZip"
      #       scp -i "$sshKeyPath" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null app.zip "${sshTarget}:${remoteZip}"

      #       # Extract and clean up remotely
      #       Write-Host "üß© Extracting app.zip on remote server to $remotePath"
      #       $remoteCommand = @"
      #       Add-Type -AssemblyName 'System.IO.Compression.FileSystem'
      #       [IO.Compression.ZipFile]::ExtractToDirectory('$remoteZip', '$remotePath')
      #       Remove-Item -Path '$remoteZip'
      #       "@

      #       ssh -i "$sshKeyPath" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $sshTarget "powershell -NoProfile -ExecutionPolicy Bypass -Command `$remoteCommand"

      #       Write-Host "‚úÖ Deployment complete"


      # - name: üîÅ Restart IIS (Optional)
      #   shell: pwsh
      #   run: |
      #       $sshKey = "$env:USERPROFILE\.ssh\id_rsa"
      #       $sshTarget = "${{ secrets.IIS_SSH_HOST }}"

      #       Write-Host "üåê Restarting IIS remotely..."
      #       ssh -i $sshKey -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $sshTarget "iisreset"
  
            # $sshKey     = "$env:USERPROFILE\.ssh\id_rsa"
            # $sshTarget  = "${{ secrets.IIS_SSH_HOST }}"
            # $remotePath = "${{ secrets.IIS_SITE_PATH }}"
            # $remoteZip  = "${{ secrets.IIS_REMOTE_ZIP }}"

            # Write-Host "üì¶ Compressing published output..."
            # Compress-Archive -Path publish_output\* -DestinationPath app.zip -Force


            # Write-Host "::notice title=üîç SSHTarget:: $sshTarget"
            # Write-Host "::notice title=üîç RemoteZip:: $remoteZip"
            # Write-Host "::notice title=üîç RemotePath:: $remotePath"

            # Write-Host "üìÅ Ensuring remote path exists..."
            # $remoteMkdir = "powershell -NoProfile -Command `"if (-not (Test-Path '$remotePath')) { New-Item -ItemType Directory -Force -Path '$remotePath'; Write-Output '‚úÖ Created: $remotePath' } else { Write-Output '‚ÑπÔ∏è Already exists: $remotePath' }`""
            # ssh -i $sshKey -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $sshTarget $remoteMkdir

            # Write-Host "üì§ Uploading app.zip to ${sshTarget}:${remoteZip}"
            # scp -v -i $sshKey -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null app.zip "${sshTarget}:${remoteZip}"

            # Write-Host "üß© Extracting app.zip on remote server to ${remotePath}"
            # $remoteCommand = @"
            # Add-Type -AssemblyName 'System.IO.Compression.FileSystem'
            # [IO.Compression.ZipFile]::ExtractToDirectory('$remoteZip', '$remotePath')
            # Remove-Item -Path '$remoteZip'
            # "@
            # ssh -i $sshKey -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $sshTarget "powershell -NoProfile -Command `$remoteCommand"

            # Write-Host "‚úÖ Deployment complete"
            

            



    #   - name: "üì§ Deploy to Remote Server"
    #     run: |
    #       echo "üßπ Cleaning target IIS folder..."
    #       ssh -o StrictHostKeyChecking=no ${{ secrets.IIS_SSH_HOST }} `
    #         "Remove-Item -Recurse -Force '${{ secrets.IIS_SITE_PATH }}\*'; `
    #          mkdir '${{ secrets.IIS_SITE_PATH }}' -Force" 2>&1 | tee ssh-clean.log

    #       echo "üì§ Uploading files to IIS..."
    #       scp -r ./publish_output/* ${{ secrets.IIS_SSH_HOST }}:"${{ secrets.IIS_SITE_PATH }}" 2>&1 | tee ssh-copy.log

    #       echo "‚ôª Restarting IIS..."
    #       ssh ${{ secrets.IIS_SSH_HOST }} "iisreset" 2>&1 | tee ssh-restart.log

    #   - name: "üìú Upload Deployment Logs"
    #     if: always()
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: deploy-logs
    #       path: |
    #         ssh-clean.log
    #         ssh-copy.log
    #         ssh-restart.log
            
