name: Build and Deploy ASP.NET Core App to IIS via SSH


on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: 🔧 Build and Publish
    runs-on: windows-latest

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v3

      - name: 🛠 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore, Build and Publish
        run: |
          mkdir logs
          echo "🔄 Restoring dependencies..."
          dotnet restore | Tee-Object -FilePath logs/restore.log
          echo "🏗 Building project..."
          dotnet build --configuration Release | Tee-Object -FilePath logs/build.log
          echo "🚀 Publishing..."
          dotnet publish --configuration Release --output publish_output | Tee-Object -FilePath logs/publish.log

      - name: ☁ Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: logs

      - name: ☁ Upload Published App
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: publish_output

  deploy:
    name: 🚀 Deploy to IIS Server via SSH
    needs: build
    runs-on: windows-latest

    steps:
      - name: ⬇ Download Published App
        uses: actions/download-artifact@v4
        with:
            name: published-app
            path: publish_output

      - name: 🔐 Setup SSH Key (No icacls)
        shell: pwsh
        run: |
              $sshDir = "$env:USERPROFILE\.ssh"
              $sshKeyPath = "$sshDir\id_rsa"
              $sshKey = "${{ secrets.IIS_SSH_KEY }}"

              Write-Host "📁 Creating .ssh directory at: $sshDir"
              New-Item -ItemType Directory -Force -Path $sshDir | Out-Null

              Write-Host "📝 Writing SSH private key to: $sshKeyPath"
              [IO.File]::WriteAllText($sshKeyPath, $sshKey)

              icacls $sshKeyPath /inheritance:r
              icacls $sshKeyPath /grant:r "$($env:USERNAME):(R)"

              # Optional: Log current user and path existence
              $CurrentUser = whoami
              Write-Host "::notice title=🔐 SSH Key Path::$sshKeyPath"
              Write-Host "::notice title=👤 Current User::$CurrentUser"
              Write-Host "::notice title=📁 SSH Directory Exists::$(Test-Path $sshDir)"
              Write-Host "::notice title=🗝️ SSH Key File Exists::$(Test-Path $sshKeyPath)"

      - name: 🔐 Generate SSH Key Pair
        shell: pwsh
        run: |
          $sshDir = "$env:USERPROFILE\.ssh"
          $privateKey = "$sshDir\id_rsa"
          $publicKey  = "$sshDir\id_rsa.pub"

          # Ensure directory exists
            if (-not (Test-Path $sshDir)) {
              New-Item -ItemType Directory -Force -Path $sshDir | Out-Null
            }

            # Generate key if not already exists
            if (-not (Test-Path $privateKey)) {
              Write-Host "🔑 Generating new SSH key pair..."
              ssh-keygen -t rsa -b 4096 -f $privateKey -N "" | Out-Null
            } else {
              Write-Host "ℹ️ SSH key already exists, skipping generation."
            }

            # Regenerate public key if missing
            if (-not (Test-Path $publicKey)) {
              Write-Host "⚠️ Public key missing. Regenerating from private key..."
              ssh-keygen -y -f $privateKey > $publicKey
            }

            # Confirm both files exist
            if (!(Test-Path $privateKey)) {
              throw "❌ Private key not found at $privateKey"
            }
            if (!(Test-Path $publicKey)) {
              throw "❌ Public key not found at $publicKey"
            }

            # Output public key (safe)
            $pubKey = Get-Content $publicKey -Raw
            Write-Host "::notice title=📤 Public Key (authorized_keys)::`n$pubKey"

            # ⚠️ Optional: Output private key (for testing only, REMOVE LATER!)
            $privKey = Get-Content $privateKey -Raw
            Write-Host "::warning title=⚠️ Private Key (TESTING ONLY)::`n$privKey"

      - name: ✅ Test SSH Connection
        shell: pwsh
        run: |
            $sshDir = "$env:USERPROFILE\.ssh"
            $sshKeyPath = "$sshDir\id_rsa"
            $sshTarget = "${{ secrets.IIS_SSH_HOST }}"  # e.g. deploy@49.249.200.70
            ssh -v -i $sshKeyPath -o StrictHostKeyChecking=no $sshTarget "echo '✅ SSH connection successful!'"


      
      # - name: 🔐 Setup SSH Key and Variables
      #   shell: pwsh
      #   run: |
      #       $sshDir     = "$env:USERPROFILE\.ssh"
      #       $sshKeyPath = "$sshDir\id_rsa"
      #       $sshTarget  = "${{ secrets.IIS_SSH_HOST }}"             # e.g. deploy@49.249.200.70
      #       $remotePath = "C:/Deploy/SampleMvcApp"                  # Remote deploy directory
      #       $remoteZip  = "$remotePath/app.zip"

      #       # Logging
      #       Write-Host "::notice title=🔐 SSH KeyPath::$sshKeyPath"
      #       Write-Host "::notice title=🔍 SSH Target::$sshTarget"
      #       Write-Host "::notice title=📁 Remote Path::$remotePath"
      #       Write-Host "::notice title=📦 Remote Zip::$remoteZip"

      #       # Save private key
      #       New-Item -ItemType Directory -Force -Path $sshDir | Out-Null
      #       Set-Content -Path $sshKeyPath -Value "${{ secrets.IIS_SSH_KEY }}" -Force

      #       # Create remote folder if needed
      #       Write-Host "📁 Ensuring remote directory exists..."
      #       $mkdirCommand = "powershell -NoProfile -Command `"New-Item -ItemType Directory -Force -Path '$remotePath'`""
      #       ssh -i "$sshKeyPath" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $sshTarget $mkdirCommand

      #       # Compress published app
      #       Write-Host "📦 Compressing app.zip from publish_output..."
      #       Compress-Archive -Path publish_output\* -DestinationPath app.zip -Force

      #       # Upload via SCP
      #       Write-Host "📤 Uploading app.zip to $remoteZip"
      #       scp -i "$sshKeyPath" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null app.zip "${sshTarget}:${remoteZip}"

      #       # Extract and clean up remotely
      #       Write-Host "🧩 Extracting app.zip on remote server to $remotePath"
      #       $remoteCommand = @"
      #       Add-Type -AssemblyName 'System.IO.Compression.FileSystem'
      #       [IO.Compression.ZipFile]::ExtractToDirectory('$remoteZip', '$remotePath')
      #       Remove-Item -Path '$remoteZip'
      #       "@

      #       ssh -i "$sshKeyPath" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $sshTarget "powershell -NoProfile -ExecutionPolicy Bypass -Command `$remoteCommand"

      #       Write-Host "✅ Deployment complete"


      # - name: 🔁 Restart IIS (Optional)
      #   shell: pwsh
      #   run: |
      #       $sshKey = "$env:USERPROFILE\.ssh\id_rsa"
      #       $sshTarget = "${{ secrets.IIS_SSH_HOST }}"

      #       Write-Host "🌐 Restarting IIS remotely..."
      #       ssh -i $sshKey -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $sshTarget "iisreset"
  
            # $sshKey     = "$env:USERPROFILE\.ssh\id_rsa"
            # $sshTarget  = "${{ secrets.IIS_SSH_HOST }}"
            # $remotePath = "${{ secrets.IIS_SITE_PATH }}"
            # $remoteZip  = "${{ secrets.IIS_REMOTE_ZIP }}"

            # Write-Host "📦 Compressing published output..."
            # Compress-Archive -Path publish_output\* -DestinationPath app.zip -Force


            # Write-Host "::notice title=🔍 SSHTarget:: $sshTarget"
            # Write-Host "::notice title=🔍 RemoteZip:: $remoteZip"
            # Write-Host "::notice title=🔍 RemotePath:: $remotePath"

            # Write-Host "📁 Ensuring remote path exists..."
            # $remoteMkdir = "powershell -NoProfile -Command `"if (-not (Test-Path '$remotePath')) { New-Item -ItemType Directory -Force -Path '$remotePath'; Write-Output '✅ Created: $remotePath' } else { Write-Output 'ℹ️ Already exists: $remotePath' }`""
            # ssh -i $sshKey -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $sshTarget $remoteMkdir

            # Write-Host "📤 Uploading app.zip to ${sshTarget}:${remoteZip}"
            # scp -v -i $sshKey -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null app.zip "${sshTarget}:${remoteZip}"

            # Write-Host "🧩 Extracting app.zip on remote server to ${remotePath}"
            # $remoteCommand = @"
            # Add-Type -AssemblyName 'System.IO.Compression.FileSystem'
            # [IO.Compression.ZipFile]::ExtractToDirectory('$remoteZip', '$remotePath')
            # Remove-Item -Path '$remoteZip'
            # "@
            # ssh -i $sshKey -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $sshTarget "powershell -NoProfile -Command `$remoteCommand"

            # Write-Host "✅ Deployment complete"
            

            



    #   - name: "📤 Deploy to Remote Server"
    #     run: |
    #       echo "🧹 Cleaning target IIS folder..."
    #       ssh -o StrictHostKeyChecking=no ${{ secrets.IIS_SSH_HOST }} `
    #         "Remove-Item -Recurse -Force '${{ secrets.IIS_SITE_PATH }}\*'; `
    #          mkdir '${{ secrets.IIS_SITE_PATH }}' -Force" 2>&1 | tee ssh-clean.log

    #       echo "📤 Uploading files to IIS..."
    #       scp -r ./publish_output/* ${{ secrets.IIS_SSH_HOST }}:"${{ secrets.IIS_SITE_PATH }}" 2>&1 | tee ssh-copy.log

    #       echo "♻ Restarting IIS..."
    #       ssh ${{ secrets.IIS_SSH_HOST }} "iisreset" 2>&1 | tee ssh-restart.log

    #   - name: "📜 Upload Deployment Logs"
    #     if: always()
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: deploy-logs
    #       path: |
    #         ssh-clean.log
    #         ssh-copy.log
    #         ssh-restart.log
            
