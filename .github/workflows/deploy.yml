name: Build and Deploy ASP.NET Core App to IIS via SSH

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: 🔧 Build and Publish
    runs-on: windows-latest

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v3

      - name: 🛠 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore, Build and Publish
        run: |
          mkdir logs
          echo "🔄 Restoring dependencies..."
          dotnet restore | Tee-Object -FilePath logs/restore.log
          echo "🏗 Building project..."
          dotnet build --configuration Release | Tee-Object -FilePath logs/build.log
          echo "🚀 Publishing..."
          dotnet publish --configuration Release --output publish_output | Tee-Object -FilePath logs/publish.log

      - name: ☁ Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: logs

      - name: ☁ Upload Published App
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: publish_output

  deploy:
    name: 🚀 Deploy to IIS Server via SSH
    needs: build
    runs-on: windows-latest

    steps:
      - name: ⬇ Download Published App
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: publish_output

      - name: 📁 Setup SSH Key (Windows PowerShell)
        shell: pwsh
        run: |
          $sshDir = "$env:USERPROFILE\.ssh"
          New-Item -ItemType Directory -Force -Path $sshDir
          Set-Content -Path "$sshDir\id_rsa" -Value "${{ secrets.IIS_SSH_KEY }}"
          icacls "$sshDir\id_rsa" /inheritance:r /grant:r "$env:USERNAME:F"
          ssh-keyscan ${{ secrets.IIS_SSH_HOST }} | Out-File -Append -FilePath "$sshDir\known_hosts"

      - name: 🌐 DNS Pre-check
        shell: pwsh
        run: |
          Write-Host "🌐 Checking if host is resolvable..."
          $host = "${{ secrets.IIS_SSH_HOST }}"
          $hostname = $host.Split("@")[-1]
          try {
            [System.Net.Dns]::GetHostAddresses($hostname)
            Write-Host "✅ Host resolved successfully: $hostname"
          } catch {
            Write-Error "❌ Failed to resolve $hostname. Please check IIS_SSH_HOST value."
            exit 1
          }

      - name: ✅ Test SSH Connection
        shell: pwsh
        run: |
          Write-Host "🔌 Testing SSH connection..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.IIS_SSH_HOST }} "echo '✅ SSH connection successful'" 2>&1 | Tee-Object -FilePath ssh-test.log

      - name: ☁ Upload SSH Test Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ssh-test-log
          path: ssh-test.log



    #   - name: "📤 Deploy to Remote Server"
    #     run: |
    #       echo "🧹 Cleaning target IIS folder..."
    #       ssh -o StrictHostKeyChecking=no ${{ secrets.IIS_SSH_HOST }} `
    #         "Remove-Item -Recurse -Force '${{ secrets.IIS_SITE_PATH }}\*'; `
    #          mkdir '${{ secrets.IIS_SITE_PATH }}' -Force" 2>&1 | tee ssh-clean.log

    #       echo "📤 Uploading files to IIS..."
    #       scp -r ./publish_output/* ${{ secrets.IIS_SSH_HOST }}:"${{ secrets.IIS_SITE_PATH }}" 2>&1 | tee ssh-copy.log

    #       echo "♻ Restarting IIS..."
    #       ssh ${{ secrets.IIS_SSH_HOST }} "iisreset" 2>&1 | tee ssh-restart.log

    #   - name: "📜 Upload Deployment Logs"
    #     if: always()
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: deploy-logs
    #       path: |
    #         ssh-clean.log
    #         ssh-copy.log
    #         ssh-restart.log
            
