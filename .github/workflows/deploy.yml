name: Build and Deploy ASP.NET Core App to IIS via SSH

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: 🔧 Build and Publish
    runs-on: windows-latest

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v3

      - name: 🛠 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore, Build and Publish
        run: |
          mkdir logs
          echo "🔄 Restoring dependencies..."
          dotnet restore | Tee-Object -FilePath logs/restore.log
          echo "🏗 Building project..."
          dotnet build --configuration Release | Tee-Object -FilePath logs/build.log
          echo "🚀 Publishing..."
          dotnet publish --configuration Release --output publish_output | Tee-Object -FilePath logs/publish.log

      - name: ☁ Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: logs

      - name: ☁ Upload Published App
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: publish_output

  deploy:
    name: 🚀 Deploy to IIS Server via SSH
    needs: build
    runs-on: windows-latest

    steps:
      - name: ⬇ Download Published App
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: publish_output

      - name: 🔍 Validate SSH Host
        shell: pwsh
        run: |
           $sshTarget = "${{ secrets.IIS_SSH_HOST }}"
            if (-not $sshTarget -or $sshTarget -eq '***' -or -not ($sshTarget -match ".+@.+")) {
            Write-Error "❌ IIS_SSH_HOST is either unset, redacted, or malformed. Expected format: user@host"
            exit 1
            }

            Write-Host "✅ Secret looks like it's set (though we can't print it because it's masked)."

      - name: 📁 Setup SSH Key with Validation
        shell: pwsh
        continue-on-error: true
        run: |
            Write-Host "🔐 Validating SSH secrets..."

            $sshDir     = "$env:USERPROFILE\.ssh"
            $sshKeyPath = "$sshDir\id_rsa"
            $sshTarget  = "${{ secrets.IIS_SSH_HOST }}"  # Expected format: user@host
            $sshKey     = "${{ secrets.IIS_SSH_KEY }}"

            # Validate SSH host
            if (-not $sshTarget -or $sshTarget -eq '***' -or -not ($sshTarget -match "^[^@]+@[^@]+$")) {
            Write-Error "❌ IIS_SSH_HOST is invalid. Expected format: username@hostname"
            exit 1
            }

            # Validate SSH key
            if (-not $sshKey -or $sshKey -eq '***') {
            Write-Error "❌ IIS_SSH_KEY is missing or masked. Please set a valid private key in GitHub Secrets."
            exit 1
            }

            Write-Host "✅ Secrets look valid. Proceeding with SSH key setup..."

            New-Item -ItemType Directory -Force -Path $sshDir | Out-Null
            Set-Content -Path $sshKeyPath -Value $sshKey -Force

            # SKIP icacls
            Write-Host "🔐 Skipping icacls — unnecessary for GitHub Windows runner"

            # Add host to known_hosts
            $hostname = $sshTarget.Split("@")[-1]
            Write-Host "🔍 Scanning SSH host key for $hostname..."
            try {
            $scanResult = ssh-keyscan $hostname 2>&1
            if (-not $scanResult) {
                Write-Warning "⚠️ ssh-keyscan did not return any result. Host might be unreachable or SSH port is closed."
            } else {
                $scanResult | Out-File -Append -FilePath "$sshDir\known_hosts"
                Write-Host "✅ Host key scanned and saved."
            }
            } catch {
            Write-Warning "⚠️ ssh-keyscan failed: $_"
            }

            






    #   - name: "📤 Deploy to Remote Server"
    #     run: |
    #       echo "🧹 Cleaning target IIS folder..."
    #       ssh -o StrictHostKeyChecking=no ${{ secrets.IIS_SSH_HOST }} `
    #         "Remove-Item -Recurse -Force '${{ secrets.IIS_SITE_PATH }}\*'; `
    #          mkdir '${{ secrets.IIS_SITE_PATH }}' -Force" 2>&1 | tee ssh-clean.log

    #       echo "📤 Uploading files to IIS..."
    #       scp -r ./publish_output/* ${{ secrets.IIS_SSH_HOST }}:"${{ secrets.IIS_SITE_PATH }}" 2>&1 | tee ssh-copy.log

    #       echo "♻ Restarting IIS..."
    #       ssh ${{ secrets.IIS_SSH_HOST }} "iisreset" 2>&1 | tee ssh-restart.log

    #   - name: "📜 Upload Deployment Logs"
    #     if: always()
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: deploy-logs
    #       path: |
    #         ssh-clean.log
    #         ssh-copy.log
    #         ssh-restart.log
            
